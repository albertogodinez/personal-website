---
import CardPreview from '../components/CardPreview.jsx';
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <h1>my favorite <span>______</span> of <span>____</span></h1>
  <div class="grid">
    <!-- TODO: map this, since ideally I will be loading all of these from something else and then mapping the values accordingly -->
    <CardPreview title={'test1'} client:load />
    <CardPreview title={'test2'} client:load />
    <CardPreview title={'test3'} client:load />
    <CardPreview title={'test4'} client:load />
    <CardPreview title={'test5'} client:load />
  </div>

  <style is:global>
    body {
      line-height: 1.5;
      -webkit-font-smoothing: antialiased;
    }
    /* grid code */
    :root {
      font-size: 18px;
      --grid-columns: 5;
      --grid-min-width: 250px;
      --grid-gap: 2.5rem;

      --spacing: 2rem;
      --spacing-half: 1rem;
      --spacing-double: 4rem;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(
        auto-fit,
        minmax(min(100%, max(var(--grid-min-width), 100% / calc(var(--grid-columns) + 1))), 1fr)
      );
      gap: var(--grid-gap);
    }

    .grid[data-columns] {
      /* define */
      &[data-columns='1'] {
        --grid-columns: 1;
      }
      &[data-columns='2'] {
        --grid-columns: 2;
      }
      &[data-columns='3'] {
        --grid-columns: 3;
      }
      &[data-columns='4'] {
        --grid-columns: 4;
      }
      &[data-columns='5'] {
        --grid-columns: 5;
      }
      &[data-columns='6'] {
        --grid-columns: 6;
      }
      /* apply */
      grid-template-columns: repeat(
        auto-fit,
        minmax(min(100%, max(var(--grid-min-width), 100% / calc(var(--grid-columns) + 1))), 1fr)
      );
    }

    /* TODO: Add this in the future */
    .grid[data-columns] {
      margin-bottom: var(--spacing-double);
      > div {
        padding: var(--spacing);
        background: rgba(255, 255, 255, 0.1);
        border-radius: 1rem;
      }
    }
  </style>


</html>
