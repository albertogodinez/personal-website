---
import '../styles/global.css';
import '../styles/nav.css';
---

<!-- todo: consider updating this an ID -->
<div class="wrapper" transition:persist>
  <!-- TODO: might need to update the name -->
  <div class="menu-container">
    <nav class="menu">
      <a href="/" class="menu__item"><span class="menu__item-text">home</span></a>
      <a class="menu__item"><span class="menu__item-text">projects</span></a>
      <a class="menu__item"><span class="menu__item-text">work</span></a>
      <a class="menu__item"><span class="menu__item-text">moodboard</span></a>
      <a href="/memorabilia" class="menu__item"><span class="menu__item-text">memorabilia</span></a>
      <a class="menu__item"><span class="menu__item-text">email</span></a>
      <a class="menu__item"><span class="menu__item-text">github</span></a>
      <div class="menu__dot"></div>
    </nav>
    <div class="menu__border"></div>
  </div>
  <div class="svg-container">
    <svg viewBox="0 0 202.9 45.5">
      <clipPath id="menu" clipPathUnits="objectBoundingBox" transform="scale(0.0049285362247413 0.021978021978022)">
        <path
          d="M6.7,45.5c5.7,0.1,14.1-0.4,23.3-4c5.7-2.3,9.9-5,18.1-10.5c10.7-7.1,11.8-9.2,20.6-14.3c5-2.9,9.2-5.2,15.2-7
          c7.1-2.1,13.3-2.3,17.6-2.1c4.2-0.2,10.5,0.1,17.6,2.1c6.1,1.8,10.2,4.1,15.2,7c8.8,5,9.9,7.1,20.6,14.3c8.3,5.5,12.4,8.2,18.1,10.5
          c9.2,3.6,17.6,4.2,23.3,4H6.7z"
        ></path>
      </clipPath>
    </svg>
  </div>
</div>
<script is:inline>
  const menu = document.querySelector('.menu');
  const menuItems = document.querySelectorAll('.menu__item');
  const menuDot = document.querySelector('.menu__dot');
  const menuBorder = document.querySelector('.menu__border');
  let isScrolling = false;

  function initPositioning() {
    console.log('initPositioning');
    const activeItem = document.querySelector('.menu__item.active');
    if (activeItem) {
      handleBorderPosition(menuBorder, menu, activeItem);
      moveDot(activeItem);
    }
  }

  function setActiveMenuItem() {
    const currentPath = window.location.pathname;

    let foundActive = false;
    menuItems.forEach((item) => {
      const link = item.getAttribute('href') || '';

      if (link === currentPath || (link === '/' && currentPath === '/')) {
        item.classList.add('active');
        foundActive = true;
      } else {
        item.classList.remove('active');
      }
    });

    if (!foundActive && menuItems.length > 0) {
      menuItems[0].classList.add('active');
    }
  }

  function isValidUrl(url) {
    try {
      new URL(url, window.location.origin);
      return true;
    } catch (e) {
      return false;
    }
  }

  function handleClick(item) {
    console.log('click');
    let activeItem = document.querySelector('.menu__item.active');
    const link = item.getAttribute('href') || '';

    if (item === activeItem) {
      // If the clicked item is the active item, scroll to the top
      window.scrollTo({ top: 0, behavior: 'smooth' });
      return;
    }

    if (!activeItem) return;

    activeItem.classList.remove('active');
    item.classList.add('active');

    activeItem = item;

    // Enable animation on click
    menuBorder.style.transition = 'transform var(--timeOut, var(--duration))';

    handleBorderPosition(menuBorder, menu, activeItem);
    moveDot(item, true);

    // Validate and route to the new link
    if (isValidUrl(link)) {
      window.location.href = link;
    }
  }

  function handleBorderPosition(menuBorder, menu, activeItem) {
    console.log('handleBorderPosition');
    activeItem = activeItem || document.querySelector('.active');
    const activeItemPosition = activeItem.getBoundingClientRect();

    const { left, width } = activeItemPosition;
    const menuLeft = menu.getBoundingClientRect().left;

    // Adjust the border's position relative to the active item's position and menu's scroll
    const moveRight = Math.floor(left - menuLeft - (menuBorder.offsetWidth - width) / 2) + 'px';
    menuBorder.style.transform = `translateX(${moveRight})`;
  }

  function moveDot(activeItem, shouldAnimate = false) {
    const { left, width } = activeItem.getBoundingClientRect();
    const menuLeft = menu.getBoundingClientRect().left;

    // Get the scroll position of the menu
    const scrollLeft = menu.scrollLeft;

    // Adjust the dot position calculation to include the menu's scroll position
    const moveX = Math.floor(left - menuLeft + scrollLeft + width / 2 - 4) + 'px';

    // Update the dot position
    menuDot.style.setProperty('--dotPosition', moveX);

    // Only trigger animation if shouldAnimate is true
    if (shouldAnimate) {
      menuDot.classList.remove('active');
      // Wait for the next animation frame to re-add the active class and re-trigger the animation
      requestAnimationFrame(() => {
        menuDot.classList.add('active');
      });
    }
  }

  document.addEventListener(
    'astro:page-load',
    () => {
      console.log('page-load');
      // Handle border movement on scroll
      menu.addEventListener('scroll', () => {
        if (!isScrolling) {
          // Disable animation during scroll
          menuBorder.style.transition = 'none';
          isScrolling = true;
        }

        const activeItem = document.querySelector('.menu__item.active');
        handleBorderPosition(menuBorder, menu, activeItem);
        moveDot(activeItem, false); // No animation on scroll

        // Set a delay to allow for scrolling to finish
        // otherwise the menu border will flicker
        setTimeout(() => {
          isScrolling = false;
        }, 150); // Adjust the delay as needed
      });

      // Resize event to adjust position on window resize
      window.addEventListener('resize', () => {
        const activeItem = document.querySelector('.menu__item.active');
        moveDot(activeItem, false); // No animation on resize
        handleBorderPosition(menuBorder, menu);
      });

      menuItems.forEach((item) => {
        item.addEventListener('click', (event) => {
          event.preventDefault(); // Prevent default link behavior
          handleClick(item);
        });
      });

      setActiveMenuItem();
      initPositioning();
    },
    { once: true }
  );

  document.addEventListener('astro:after-swap', () => {
    console.log('after-swap');
    setActiveMenuItem();
    initPositioning();
  });
</script>
