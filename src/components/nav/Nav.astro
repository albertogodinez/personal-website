---
import './nav.css';
---

<!-- todo: consider updating this an ID -->
<header class="wrapper" transition:persist>
  <!-- TODO: might need to update the name -->
  <div class="menu-container">
    <nav class="menu">
      <!-- TODO: add all of these navigation items into its own config file -->
      <!-- todo: Only add some of them if viewport is small (i.e. contact/experience) -->
      <a href="/" class="menu__item"><span class="menu__item-text">home</span></a>
      <!-- <a href="/" data-section="experience" class="menu__item"><span class="menu__item-text">experience</span></a> -->
      <a href="/moodboard" class="menu__item"><span class="menu__item-text">moodboard</span></a>
      <a href="/memorabilia" class="menu__item"><span class="menu__item-text">memorabilia</span></a>
      <a
        href="mailto:alberto.godinez90@gmail.com"
        rel="noreferrer"
        target="_blank"
        class="action-trigger action-trigger__underline"><span class="menu__item-text">contact</span></a
      >
      <div class="menu__dot"></div>
    </nav>
    <div class="menu__border"></div>
  </div>
  <div class="svg-container">
    <svg viewBox="0 0 202.9 45.5">
      <clipPath id="menu" clipPathUnits="objectBoundingBox" transform="scale(0.0049285362247413 0.021978021978022)">
        <path
          d="M6.7,45.5c5.7,0.1,14.1-0.4,23.3-4c5.7-2.3,9.9-5,18.1-10.5c10.7-7.1,11.8-9.2,20.6-14.3c5-2.9,9.2-5.2,15.2-7
          c7.1-2.1,13.3-2.3,17.6-2.1c4.2-0.2,10.5,0.1,17.6,2.1c6.1,1.8,10.2,4.1,15.2,7c8.8,5,9.9,7.1,20.6,14.3c8.3,5.5,12.4,8.2,18.1,10.5
          c9.2,3.6,17.6,4.2,23.3,4H6.7z"
        ></path>
      </clipPath>
    </svg>
  </div>
</header>
<script>
  // TODO: eventually move this to a separate file and restructure how this is handled
  import { navigate } from 'astro:transitions/client';

  const menu = document.querySelector('.menu') as HTMLElement;
  const menuItems = document.querySelectorAll('.menu__item') as NodeListOf<Element>;
  const menuDot = document.querySelector('.menu__dot') as HTMLElement;
  const menuBorder: HTMLElement = document.querySelector('.menu__border') as HTMLElement;
  let isScrolling = false;
  let activeItem: HTMLElement | null = null;

  // function initPositioning() {
  //   activeItem = document.querySelector('.menu__item.active') || (menuItems[0] as HTMLElement);
  //   if (activeItem) {
  //     activeItem.classList.add('active');
  //     handleBorderPosition(menuBorder, menu, activeItem);
  //     moveDot(activeItem);
  //   }
  // }

  function setActiveMenuItem() {
    const currentPath = window.location.pathname;
    // const currentHash = window.location.hash.slice(1);

    activeItem = null; // Reset activeItem

    menuItems.forEach((item: Element) => {
      const link = item.getAttribute('href') || '';
      // const section = item.getAttribute('data-section');

      if (link === currentPath || (link === '/' && currentPath === '/')) {
        setActive(item);
        // } else if (link === '/' && section === currentHash) {
        //   setActive(item);
      } else {
        item.classList.remove('active');
      }
    });

    if (!activeItem && menuItems.length > 0) {
      setActive(menuItems[0]);
    }

    // Update positioning after setting active item
    if (activeItem) {
      handleBorderPosition(menuBorder, menu, activeItem);
      moveDot(activeItem);
    }
  }

  function setActive(item: Element) {
    if (activeItem) {
      activeItem.classList.remove('active');
    }
    item.classList.add('active');
    activeItem = item as HTMLElement;
  }

  function handleClick(item: HTMLElement, event: MouseEvent) {
    event.preventDefault();
    const link = item.getAttribute('href') || '';
    if (item === activeItem) {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      return;
    }
    // const section = item.getAttribute('data-section') || '';

    // if (window.location.pathname === '/' && section) {
    // We're on the home page, so we can smooth scroll
    // const targetElement = document.getElementById(section);
    // if (targetElement) {
    // targetElement.scrollIntoView({ behavior: 'smooth' });
    // history.pushState(null, '', `/#${section}`);
    // }
    // }
    // else {
    //   navigate(section ? `/#${section}` : link).then(() => {
    //     if (section) {
    //       const targetElement = document.getElementById(section);
    //       if (targetElement) {
    //         targetElement.scrollIntoView({ behavior: 'smooth' });
    //       }
    //     }
    //   });
    // }

    setActive(item);
    // handleBorderPosition(menuBorder, menu, item);
    // moveDot(item);
    // TODO: MAYBE ADD THIS BACK
    setTimeout(() => {
      navigate(link);
    }, 600);
  }

  function handleBorderPosition(menuBorder: HTMLElement, menu: HTMLElement, item: HTMLElement) {
    const itemPosition = item.getBoundingClientRect();
    const { left, width } = itemPosition;
    const menuLeft = menu.getBoundingClientRect().left;
    const moveRight = Math.floor(left - menuLeft - (menuBorder.offsetWidth - width) / 2) + 'px';
    menuBorder.style.transform = `translateX(${moveRight})`;
  }

  function moveDot(item: HTMLElement, shouldAnimate = false) {
    const { left, width } = item.getBoundingClientRect();
    const menuLeft = menu.getBoundingClientRect().left;
    const scrollLeft = menu.scrollLeft;
    const moveX = Math.floor(left - menuLeft + scrollLeft + width / 2 - 4) + 'px';
    menuDot.style.setProperty('--dotPosition', moveX);

    if (shouldAnimate) {
      menuDot.classList.remove('active');
      requestAnimationFrame(() => {
        menuDot.classList.add('active');
      });
    }
  }

  // Handle scroll events
  menu.addEventListener('scroll', () => {
    if (!isScrolling) {
      menuBorder.style.transition = 'none';
      isScrolling = true;
    }

    handleBorderPosition(menuBorder, menu, activeItem as HTMLElement);
    moveDot(activeItem as HTMLElement, false);

    setTimeout(() => {
      isScrolling = false;
      menuBorder.style.transition = `transform var(--hoverDuration)`;
    }, 150);
  });

  // Resize event to adjust position on window resize
  window.addEventListener('resize', () => {
    moveDot(activeItem as HTMLElement, false);
    handleBorderPosition(menuBorder, menu, activeItem as HTMLElement);
  });

  // Handle click events for all devices
  menuItems.forEach((item: Element) => {
    item.addEventListener('click', (event) => handleClick(item as HTMLElement, event as MouseEvent));
  });

  window.addEventListener('load', () => {
    setActiveMenuItem();
    // const hash = window.location.hash.slice(1);
    // if (hash) {
    //   const targetElement = document.getElementById(hash);
    //   if (targetElement) {
    //     targetElement.scrollIntoView({ behavior: 'smooth' });
    //   }
    // }
  });

  // Handle hover events for devices with hover capability
  if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
    menuItems.forEach((item: Element) => {
      item.addEventListener('mouseenter', () => {
        handleBorderPosition(menuBorder, menu, item as HTMLElement);
        moveDot(item as HTMLElement, true);
      });

      item.addEventListener('mouseleave', () => {
        handleBorderPosition(menuBorder, menu, activeItem as HTMLElement);
        moveDot(activeItem as HTMLElement, true);
      });
    });
  }

  setActiveMenuItem();
  // initPositioning();

  document.addEventListener('astro:route-change', setActiveMenuItem);
  document.addEventListener('astro:page-load', () => {
    console.log('page loaded');
    setActiveMenuItem();
  });
  // document.addEventListener('astro:page-load', initPositioning);
</script>
